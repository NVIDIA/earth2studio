# SPDX-FileCopyrightText: Copyright (c) 2024-2025 NVIDIA CORPORATION & AFFILIATES.
# SPDX-FileCopyrightText: All rights reserved.
# SPDX-License-Identifier: Apache-2.0
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# %%
"""
cBottle Super Resolution
========================

Climate in a Bottle (cBottle) super resolution workflows for global weather.

This example will demonstrate the cBottle diffusion model for super resolution of global
weather data. The CBottleSR model takes low-resolution climate data and generates
high-resolution outputs using a diffusion-based approach.

For more information on cBottle see:

- https://arxiv.org/abs/2505.06474v1

In this example you will learn:

- Performing super resolution on synthetic data from the cBottle data source
- Performing super resolution on ERA5 data after infilling with cBottle
- Post-processing and visualizing super-resolution results
"""

# %%
# Set Up
# ------
# For this example we will use the cBottle data source, infill diagnostic, and the
# CBottleSR super resolution model. The workflow demonstrates two approaches:
# 1) Super resolution on synthetic data generated by cBottle3D
# 2) Super resolution on real ERA5 data after variable infilling

# %%
# We need the following components:
#
# - Datasource: Generate data from the CBottle3D data api :py:class:`earth2studio.data.CBottle3D`.
# - Datasource: Pull data from the WeatherBench2 data api :py:class:`earth2studio.data.WB2ERA5`.
# - Diagnostic Model: Use the built in CBottle Infill Model :py:class:`earth2studio.models.dx.CBottleInfill`.
# - Super Resolution Model: Use the CBottleSR super resolution model :py:class:`earth2studio.models.dx.CBottleSR`.

# %%

import os

os.makedirs("outputs", exist_ok=True)
from dotenv import load_dotenv

load_dotenv()  # TODO: make common example prep function

import torch
from earth2studio.data import CBottle3D, WB2ERA5, fetch_data
from earth2studio.models.dx import CBottleInfill, CBottleSR

# Get the device
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

# Load the cBottle data source
package = CBottle3D.load_default_package()
cbottle_ds = CBottle3D.load_model(package)
cbottle_ds = cbottle_ds.to(device)

# Load the super resolution model
package = CBottleSR.load_default_package()
cbottle_sr = CBottleSR.load_model(package)
cbottle_sr = cbottle_sr.to(device)

# Load the infill model
input_variables = ["u10m", "v10m"]
package = CBottleInfill.load_default_package()
cbottle_infill = CBottleInfill.load_model(package, input_variables=input_variables)
cbottle_infill = cbottle_infill.to(device)

# Load the ERA5 data source
era5_ds = WB2ERA5()

# %%
# Super Resolution on Synthetic Data
# ----------------------------------
# First, let's generate synthetic climate data using the cBottle3D data source
# and then perform super resolution on it. This demonstrates the full cBottle
# pipeline from data generation to super-resolution enhancement.

# %%

import datetime
from collections import OrderedDict
import numpy as np

# Generate some samples from cBottle
x, coords = fetch_data(
    cbottle_ds,
    [datetime.datetime(2020, 1, 1)],
    cbottle_sr.input_coords()["variable"],
    device=device,
)

# Prepare coordinates for super resolution
coords = OrderedDict(
    {
        "batch": np.arange(1),  # Single batch
        "variable": cbottle_sr.input_coords()["variable"],
        "lat": cbottle_sr.input_coords()["lat"],
        "lon": cbottle_sr.input_coords()["lon"],
    }
)

# Reshape data to match expected input format (batch, variable, lat, lon)
x = x.reshape(1, x.shape[-3], x.shape[-2], x.shape[-1])

# Perform super resolution on synthetic data
sr_synth_x, sr_synth_coords = cbottle_sr(x, coords)

# %%
# Super Resolution on ERA5 Data
# -----------------------------
# Next, we'll demonstrate super resolution on real ERA5 data. Since ERA5 doesn't
# contain all the variables needed by CBottleSR, we first use the CBottleInfill
# model to predict the missing variables, then perform super resolution.

# %%

# Get the ERA5 data (only u10m and v10m available)
x, coords = fetch_data(
    era5_ds,
    [datetime.datetime(2020, 1, 1)],
    input_variables,
    device=device,
)

# Perform infilling to get all required variables
x, infill_coords = cbottle_infill(x, coords)

# Prepare coordinates for super resolution
coords = OrderedDict(
    {
        "batch": np.arange(1),  # Single batch
        "variable": cbottle_sr.input_coords()["variable"],
        "lat": cbottle_sr.input_coords()["lat"],
        "lon": cbottle_sr.input_coords()["lon"],
    }
)

# Map infilled variables to super resolution input variables
infill_variable_mapping = {key: i for i, key in enumerate(infill_coords["variable"])}
variable_mapping = [
    infill_variable_mapping[key] for key in cbottle_sr.input_coords()["variable"]
]

# Select the required variables and reshape for super resolution
x = x[0, 0, variable_mapping, :, :][None]  # Shape: (1, 12, 721, 1440)
sr_infill_x, sr_infill_coords = cbottle_sr(x, coords)

# %%
# Post Processing CBottle Super Resolution Data
# ---------------------------------------------
# Let's visualize the super resolution results to compare the synthetic data
# approach with the ERA5 infilling approach. We'll plot the total cloud liquid
# water (tclw) variable as an example.

# %%
import cartopy.crs as ccrs
import matplotlib.pyplot as plt

# Create a Lambert Conformal projection centered on the data
projection = ccrs.LambertConformal(
    central_longitude=sr_synth_coords["lon"][:].mean(),
)

fig = plt.figure(figsize=(16, 8))

# Plot the synthetic super resolution data
ax0 = fig.add_subplot(1, 2, 1, projection=projection)
c = ax0.pcolormesh(
    sr_synth_coords["lon"],
    sr_synth_coords["lat"],
    sr_synth_x[0, 0, :, :],  # tclw (first variable)
    transform=ccrs.PlateCarree(),
    cmap="cubehelix",
)
plt.colorbar(c, ax=ax0, shrink=0.6, label="Total Cloud Liquid Water (kg/m²)")
ax0.coastlines()
ax0.gridlines()
ax0.set_title("Synthetic Data Super Resolution (cBottle3D → CBottleSR)")

# Plot the ERA5 infilled super resolution data
ax1 = fig.add_subplot(1, 2, 2, projection=projection)
c = ax1.pcolormesh(
    sr_infill_coords["lon"],
    sr_infill_coords["lat"],
    sr_infill_x[0, 0, :, :],  # tclw (first variable)
    transform=ccrs.PlateCarree(),
    cmap="cubehelix",
)
plt.colorbar(c, ax=ax1, shrink=0.6, label="Total Cloud Liquid Water (kg/m²)")
ax1.coastlines()
ax1.gridlines()
ax1.set_title("ERA5 Infilled Super Resolution (ERA5 → CBottleInfill → CBottleSR)")

plt.tight_layout()
plt.savefig("outputs/16_cbottle_super_resolution.jpg", dpi=150, bbox_inches="tight")
plt.show()

print(f"Synthetic super resolution output shape: {sr_synth_x.shape}")
print(f"ERA5 infilled super resolution output shape: {sr_infill_x.shape}")
print(f"Output resolution: {sr_synth_coords['lat'].shape[0]} x {sr_synth_coords['lon'].shape[0]}")