[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "earth2studio"
authors = [
  { name="NVIDIA PhysicsNeMo Team" },
]
description = "Open-source deep-learning framework for exploring, building and deploying AI weather/climate workflows."
readme = "README.md"
requires-python = ">=3.10"
license = "Apache-2.0"
dependencies = [
    "cfgrib >= 0.9.10.3",
    "cftime",
    "fsspec>=2024.2.0",
    "gcsfs",
    "h5py>=3.2.0",
    "h5netcdf>=1.0.0",
    "huggingface-hub>=0.4.0",
    "loguru",
    "netCDF4>=1.6.4",
    "ngcsdk>=3.55.0",
    "nest_asyncio", # TODO Remove
    "python-dotenv",
    "s3fs>=2023.5.0",
    "torch>=2.5.0",
    "tqdm>=4.65.0",
    "xarray[parallel]>=2023.1.0",
    "zarr>=2.14.2",
    "numcodecs<0.15.0", # TODO: Remove
]

classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    'Programming Language :: Python',
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.11',
    'Programming Language :: Python :: 3.12',
    'Programming Language :: Python :: 3 :: Only',
    "Intended Audience :: Science/Research",
    "Environment :: GPU",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    'Typing :: Typed',
]
dynamic = ["version"]

[project.urls]
Homepage = "https://github.com/NVIDIA/earth2studio"
Documentation = "https://nvidia.github.io/earth2studio"
Issues = "https://github.com/NVIDIA/earth2studio/issues"
Changelog = "https://github.com/NVIDIA/earth2studio/blob/main/CHANGELOG.md"

[project.optional-dependencies]
data = [
    "cdsapi>=0.7.5",
    "eccodes>=2.38.0",
    "ecmwf-opendata>=0.3.3",
    "herbie-data",
]
perturbation = [
    "torch-harmonics>=0.7.4",
]
statistics = [
    "onnx-weekly ; python_full_version >= '3.13'",
    "nvidia-physicsnemo>=1.0.1",
]
# PX Models
aurora = [
    "microsoft-aurora>=1.5.0",
]
aurora-fork = [
    "microsoft-aurora", # optional fork install without timm package version conflict
]
dlwp = [
    "onnx-weekly ; python_full_version >= '3.13'",
    "nvidia-physicsnemo>=1.0.1",
    "importlib_metadata",
]
fcn = [
    "onnx-weekly ; python_full_version >= '3.13'",
    "nvidia-physicsnemo>=1.0.1",
]
fengwu = [
    "onnx-weekly ; python_full_version >= '3.13'",
    "onnxruntime-gpu>=1.21.0",
]
interp-modafno = [
    "onnx-weekly ; python_full_version >= '3.13'",
    "nvidia-physicsnemo>=1.0.1",
]
pangu = [
    "onnx-weekly ; python_full_version >= '3.13'",
    "onnxruntime-gpu>=1.21.0",
]
sfno = [
    "jsbeautifier>=1.15.4",
    "makani[all]",
    "numba>=0.61.0",
    "pynvml>=12.0.0",
    "onnx-weekly ; python_full_version >= '3.13'",
    "ruamel-yaml>=0.18.10",
    "tensorly>=0.9.0",
    "tensorly-torch>=0.5.0",
    "torch-harmonics>=0.7.4",
]
stormcast = [
    "einops>=0.8.1",
    "onnx-weekly ; python_full_version >= '3.13'",
    "nvidia-physicsnemo>=1.0.1",
    "nvtx>=0.2.11",
    "omegaconf>=2.3.0",
    "scipy>=1.15.2",
]
# DX Models
climatenet = []
corrdiff = [
    "einops>=0.8.1",
    "onnx-weekly ; python_full_version >= '3.13'",
    "nvidia-physicsnemo>=1.0.1",
    "nvtx>=0.2.11",
    "scipy>=1.15.2",
]
derived = []
precip-afno = [
    "onnx-weekly ; python_full_version >= '3.13'",
    "nvidia-physicsnemo>=1.0.1",
]
precip-afno-v2 = [
    "onnx-weekly ; python_full_version >= '3.13'",
    "nvidia-physicsnemo>=1.0.1",
]
windgust-afno = [
    "onnx-weekly ; python_full_version >= '3.13'",
    "nvidia-physicsnemo>=1.0.1",
]
# All, must not have conflicts
all = [
    "earth2studio[data,perturbation,statistics]",
    "earth2studio[aurora-fork,dlwp,fcn,fengwu,interp-modafno,pangu,sfno,stormcast]",
    "earth2studio[climatenet,corrdiff,precip-afno,precip-afno-v2,windgust-afno]",
]

# ==== UV configuration ====
[tool.uv]
conflicts = [
    [
      { extra = "aurora" },
      { extra = "dlwp" },
    ],
    [
      { extra = "aurora" },
      { extra = "fcn" },
    ],
    [
      { extra = "aurora" },
      { extra = "sfno" },
    ],
    [
      { extra = "aurora" },
      { extra = "stormcast" },
    ],
    [
      { extra = "aurora" },
      { extra = "corrdiff" },
    ],
    [
      { extra = "aurora" },
      { extra = "precip-afno" },
    ],
    [
      { extra = "aurora" },
      { extra = "aurora-fork" },
    ],
]
# Force onnx to only try to install when below 3.13, otherwise we will use onnx weekly
override-dependencies = ["onnx; python_full_version < '3.13'"]

[tool.uv.sources]
makani = { git = "https://github.com/NickGeneva/modulus-makani.git", rev = "3da09f9e52a6393839d73d44262779ac7279bc2f" }
microsoft-aurora = { git = "https://github.com/NickGeneva/aurora.git", rev = "ab41cf1de67d5dcc723b96fc9a6219e4b548d181" }

[dependency-groups]
dev = [
    "black==24.1.0",
    "coverage>=6.5.0",
    "interrogate>=1.5.0",
    "hatch>=1.14.0",
    "mypy",
    "pre-commit",
    "pytest>=6.0.0",
    "pytest-timeout>=2.0.1",
    "pytest-skip-slow>=0.0.5",
    "pyyaml>=6.0",
    "types-requests",
    "ruff",
]
docs = [
    "cartopy",
    "matplotlib",
    "scipy",
    "sphinx-design",
    "sphinx>=6.0.0",
    "jupytext>=1.15.0",
    "sphinx-autodoc-typehints>=1.24.0",
    "sphinx-gallery>=0.12.0",
    "sphinx-togglebutton>=0.3.0",
    "myst-parser>=0.18.0",
    "sphinx-favicon>=1.0.1",
    "pydata-sphinx-theme==0.15.2",
]

[tool.hatch.version]
path = "earth2studio/__init__.py"

[tool.hatch.build.targets.sdist]
include = ["earth2studio/**/*.py"]
exclude = []

# ==== Ruff configuration ====
[tool.ruff]
# Enable flake8/pycodestyle (`E`), Pyflakes (`F`), flake8-bandit (`S`),
# isort (`I`), and performance 'PERF' rules.
select = ["E", "F", "S", "I", "PERF"]
fixable = ["I"]

# Never enforce `E402`, `E501` (line length violations),
# and `S311` (random number generators)
ignore = ["E501", "S311"]

# Exclude the examples and experimental folders
exclude = []

[tool.ruff.per-file-ignores]
# Ignore `F401` (import violations) in all `__init__.py` files, and in `docs/*.py`.
"__init__.py" = ["F401"]
"docs/*.py" = ["F401"]
"examples/*.py" = ["E402"]

# Ignore `S101` (assertions) in all `test` files.
"test/*.py" = ["S101"]

# ==== Pytest configuration ====
[tool.pytest.ini_options]
testpaths = ["test"]
norecursedirs = [".git", "third_party"]
# show extra info on xfailed, xpassed, and skipped tests
addopts = ["-vv", "-r", "xfXs"]
markers = [
    "slow: marks tests as slow (deselect with: -m 'not slow')",
    "cli: marks tests which run CLIs"
]
asyncio_mode = "auto"

# ==== Coverage.py configuration (ran using pytest-cov) ====
# See: https://coverage.readthedocs.io/en/latest/config.html
[tool.coverage.run]
branch = true
concurrency = ["multiprocessing", "thread"]
source = ["earth2studio"]
omit = [
    "third_party/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
]
exclude_also = [
    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
    # Don't complain about protocols:
    "@runtime_checkable",
]
omit = [
    # omit anything in a .local directory anywhere
    "test/*",
    "earth2studio/models/nn/*",
]
show_missing = true
fail_under = 75

[tool.coverage.xml]
output = "e2studio.coverage.xml"

# ==== Interrogate configuration ====
[tool.interrogate]
ignore-init-method = true
ignore-init-module = true
ignore-magic = true
ignore-semiprivate = true
ignore-private = true
ignore-property-decorators = true
ignore-module = true
ignore-nested-functions = true
ignore-nested-classes = true
fail-under = 95
color = true
omit-covered-files = false
verbose = 2
exclude = ["setup.py", "test/*", "docs", "build"]
ignore-regex = ["^get$", "^mock_.*", ".*BaseClass.*"]

# ==== MyPy configuration ====
# See: https://mypy.readthedocs.io/en/stable/config_file.html
[tool.mypy]
python_version = "3.10"
packages = ['earth2studio']
exclude = [
    '^(examples|test|docs)'
]
disallow_untyped_calls = true
disallow_untyped_defs = true
check_untyped_defs = true
implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = false
follow_imports = 'skip'
