
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/12_prognostic_temporal_interpolation.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_12_prognostic_temporal_interpolation.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_12_prognostic_temporal_interpolation.py:


Temporal Interpolation of Forecasts
==================================

This example demonstrates how to use the InterpModAFNO model to interpolate
forecasts from a base model to a finer time resolution.

In this example you will learn:

- How to load a base prognostic model (e.g., SFNO)
- How to load the InterpModAFNO model
- How to run the interpolation model to get forecasts at a finer time resolution
- How to visualize the results

.. GENERATED FROM PYTHON SOURCE LINES 34-37

Set Up
------
First, let's import the necessary modules and set up our environment.

.. GENERATED FROM PYTHON SOURCE LINES 39-51

.. code-block:: Python

    import os

    import matplotlib.pyplot as plt
    import numpy as np

    from earth2studio.data import GFS
    from earth2studio.io import ZarrBackend
    from earth2studio.models.px import SFNO, InterpModAFNO

    # Create output directory
    os.makedirs("outputs", exist_ok=True)


.. GENERATED FROM PYTHON SOURCE LINES 52-56

Load Models
-----------
We'll use SFNO as our base model and the InterpModAFNO model to
interpolate its output to a finer time resolution.

.. GENERATED FROM PYTHON SOURCE LINES 58-59

Load the base model (SFNO)

.. GENERATED FROM PYTHON SOURCE LINES 59-73

.. code-block:: Python

    sfno_package = SFNO.load_default_package()
    base_model = SFNO.load_model(sfno_package)

    # Load the interpolation model
    interp_package = InterpModAFNO.load_default_package()
    interp_model = InterpModAFNO.load_model(interp_package)
    interp_model.px_model = base_model  # Set the base model

    # Create the data source
    data = GFS()

    # Create the IO handler
    io = ZarrBackend()


.. GENERATED FROM PYTHON SOURCE LINES 74-79

Run the Interpolation Model
---------------------------
Now we'll run the interpolation model to get forecasts at a finer time resolution.
The base model (SFNO) produces forecasts at 6-hour intervals, and the
interpolation model will interpolate to 1-hour intervals.

.. GENERATED FROM PYTHON SOURCE LINES 81-82

Define forecast parameters

.. GENERATED FROM PYTHON SOURCE LINES 82-91

.. code-block:: Python

    forecast_date = "2024-01-01"
    nsteps = 1  # Number of forecast steps from the base model
    # The interpolation model will automatically interpolate between these steps

    # Run the model
    from earth2studio.run import deterministic

    io = deterministic([forecast_date], nsteps, interp_model, data, io)


.. GENERATED FROM PYTHON SOURCE LINES 92-96

Visualize Results
----------------
Let's visualize the temperature at 2 meters (t2m) at each time step
and save them as separate files.

.. GENERATED FROM PYTHON SOURCE LINES 98-99

Get the number of time steps

.. GENERATED FROM PYTHON SOURCE LINES 99-124

.. code-block:: Python

    n_steps = io["t2m"].shape[1]

    # Create a separate plot for each time step
    for step in range(n_steps):
        # Create a new figure for each time step
        plt.figure(figsize=(10, 6))

        # Create the plot - flip the data vertically and adjust extent to rotate 180 degrees
        im = plt.imshow(
            np.flipud(io["t2m"][0, step]),  # Flip the data vertically
            cmap="Spectral_r",
            origin="lower",
            extent=[0, 360, -90, 90],  # Keep the same extent
            aspect="auto",
        )

        # Set title
        plt.title(f"Temperature at 2m - Step: {step}hrs")

        # Add colorbar
        plt.colorbar(im, label="Temperature (K)")

        # Save the figure
        plt.savefig(f"outputs/12_t2m_step_{step}.jpg")
        plt.close()  # Close the figure to free memory

**Estimated memory usage:**  0 MB


.. _sphx_glr_download_examples_12_prognostic_temporal_interpolation.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 12_prognostic_temporal_interpolation.ipynb <12_prognostic_temporal_interpolation.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 12_prognostic_temporal_interpolation.py <12_prognostic_temporal_interpolation.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: 12_prognostic_temporal_interpolation.zip <12_prognostic_temporal_interpolation.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
