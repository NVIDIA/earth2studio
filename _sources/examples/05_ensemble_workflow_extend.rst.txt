
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/05_ensemble_workflow_extend.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_05_ensemble_workflow_extend.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_05_ensemble_workflow_extend.py:


Single Variable Perturbation Method
===================================

Intermediate ensemble inference using a custom perturbation method.

This example will demonstrate how to run a an ensemble inference workflow
with a custom perturbation method that only applies noise to a specific variable.

In this example you will learn:

- How to extend an existing pertubration method
- How to instantiate a built in prognostic model
- Creating a data source and IO object
- Running a simple built in workflow
- Extend a built-in method using custom code.
- Post-processing results

.. GENERATED FROM PYTHON SOURCE LINES 38-43

Set Up
------
All workflows inside Earth2Studio require constructed components to be
handed to them. In this example, we will use the built in ensemble workflow
:py:meth:`earth2studio.run.ensemble`.

.. GENERATED FROM PYTHON SOURCE LINES 45-48

.. literalinclude:: ../../earth2studio/run.py
   :language: python
   :lines: 116-156

.. GENERATED FROM PYTHON SOURCE LINES 50-56

We need the following:

- Prognostic Model: Use the built in DLWP model :py:class:`earth2studio.models.px.DLWP`.
- perturbation_method: Extend the Spherical Gaussian Method :py:class:`earth2studio.perturbation.SphericalGaussian`.
- Datasource: Pull data from the GFS data api :py:class:`earth2studio.data.GFS`.
- IO Backend: Save the outputs into a Zarr store :py:class:`earth2studio.io.ZarrBackend`.

.. GENERATED FROM PYTHON SOURCE LINES 58-82

.. code-block:: Python

    import os

    os.makedirs("outputs", exist_ok=True)
    from dotenv import load_dotenv

    load_dotenv()  # TODO: make common example prep function

    import numpy as np
    import torch

    from earth2studio.data import GFS
    from earth2studio.io import ZarrBackend
    from earth2studio.models.px import DLWP
    from earth2studio.perturbation import Perturbation, SphericalGaussian
    from earth2studio.run import ensemble
    from earth2studio.utils.type import CoordSystem

    # Load the default model package which downloads the check point from NGC
    package = DLWP.load_default_package()
    model = DLWP.load_model(package)

    # Create the data source
    data = GFS()








.. GENERATED FROM PYTHON SOURCE LINES 83-86

The perturbation method in :ref:`sphx_glr_examples_03_ensemble_workflow.py` is naive because it
applies the same noise amplitude to every variable. We can create a custom wrapper
that only applies the perturbation method to a particular variable instead.

.. GENERATED FROM PYTHON SOURCE LINES 88-118

.. code-block:: Python

    class ApplyToVariable:
        """Apply a perturbation to only a particular variable."""

        def __init__(self, pm: Perturbation, variable: str | list[str]):
            self.pm = pm
            if isinstance(variable, str):
                variable = [variable]
            self.variable = variable

        @torch.inference_mode()
        def __call__(
            self,
            x: torch.Tensor,
            coords: CoordSystem,
        ) -> tuple[torch.Tensor, CoordSystem]:
            # Apply perturbation
            xp, _ = self.pm(x, coords)
            # Add perturbed slice back into original tensor
            ind = np.in1d(coords["variable"], self.variable)
            x[..., ind, :, :] = xp[..., ind, :, :]
            return x, coords


    # Generate a new noise amplitude that specifically targets 't2m' with a 1 K noise amplitude
    avsg = ApplyToVariable(SphericalGaussian(noise_amplitude=1.0), "t2m")

    # Create the IO handler, store in memory
    chunks = {"ensemble": 1, "time": 1}
    io = ZarrBackend(file_name="outputs/05_ensemble_avsg.zarr", chunks=chunks)








.. GENERATED FROM PYTHON SOURCE LINES 119-128

Execute the Workflow
--------------------
With all components initialized, running the workflow is a single line of Python code.
Workflow will return the provided IO object back to the user, which can be used to
then post process. Some have additional APIs that can be handy for post-processing or
saving to file. Check the API docs for more information.

For the forecast we will predict for 10 steps (for FCN, this is 60 hours) with 8 ensemble
members which will be ran in 2 batches with batch size 4.

.. GENERATED FROM PYTHON SOURCE LINES 130-145

.. code-block:: Python

    nsteps = 10
    nensemble = 8
    batch_size = 4
    io = ensemble(
        ["2024-01-01"],
        nsteps,
        nensemble,
        model,
        data,
        io,
        avsg,
        batch_size=batch_size,
        output_coords={"variable": np.array(["t2m", "tcwv"])},
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    2024-06-24 21:13:09.511 | INFO     | earth2studio.run:ensemble:294 - Running ensemble inference!
    2024-06-24 21:13:09.511 | INFO     | earth2studio.run:ensemble:302 - Inference device: cuda
    2024-06-24 21:13:09.518 | DEBUG    | earth2studio.data.gfs:fetch_gfs_dataarray:149 - Fetching GFS index file: 2023-12-31 18:00:00
    Fetching GFS for 2023-12-31 18:00:00:   0%|          | 0/7 [00:00<?, ?it/s]                                                                               2024-06-24 21:13:09.881 | DEBUG    | earth2studio.data.gfs:fetch_gfs_dataarray:196 - Fetching GFS grib file for variable: t850 at 2023-12-31 18:00:00
    Fetching GFS for 2023-12-31 18:00:00:   0%|          | 0/7 [00:00<?, ?it/s]    Fetching GFS for 2023-12-31 18:00:00:  14%|█▍        | 1/7 [00:35<03:30, 35.11s/it]                                                                                       2024-06-24 21:13:44.993 | DEBUG    | earth2studio.data.gfs:fetch_gfs_dataarray:196 - Fetching GFS grib file for variable: z1000 at 2023-12-31 18:00:00
    Fetching GFS for 2023-12-31 18:00:00:  14%|█▍        | 1/7 [00:35<03:30, 35.11s/it]    Fetching GFS for 2023-12-31 18:00:00:  29%|██▊       | 2/7 [00:37<01:20, 16.04s/it]                                                                                       2024-06-24 21:13:47.682 | DEBUG    | earth2studio.data.gfs:fetch_gfs_dataarray:196 - Fetching GFS grib file for variable: z700 at 2023-12-31 18:00:00
    Fetching GFS for 2023-12-31 18:00:00:  29%|██▊       | 2/7 [00:37<01:20, 16.04s/it]    Fetching GFS for 2023-12-31 18:00:00:  43%|████▎     | 3/7 [00:38<00:36,  9.17s/it]                                                                                       2024-06-24 21:13:48.678 | DEBUG    | earth2studio.data.gfs:fetch_gfs_dataarray:196 - Fetching GFS grib file for variable: z500 at 2023-12-31 18:00:00
    Fetching GFS for 2023-12-31 18:00:00:  43%|████▎     | 3/7 [00:38<00:36,  9.17s/it]    Fetching GFS for 2023-12-31 18:00:00:  57%|█████▋    | 4/7 [00:39<00:17,  5.97s/it]                                                                                       2024-06-24 21:13:49.746 | DEBUG    | earth2studio.data.gfs:fetch_gfs_dataarray:196 - Fetching GFS grib file for variable: z300 at 2023-12-31 18:00:00
    Fetching GFS for 2023-12-31 18:00:00:  57%|█████▋    | 4/7 [00:39<00:17,  5.97s/it]    Fetching GFS for 2023-12-31 18:00:00:  71%|███████▏  | 5/7 [00:40<00:08,  4.14s/it]                                                                                       2024-06-24 21:13:50.636 | DEBUG    | earth2studio.data.gfs:fetch_gfs_dataarray:196 - Fetching GFS grib file for variable: tcwv at 2023-12-31 18:00:00
    Fetching GFS for 2023-12-31 18:00:00:  71%|███████▏  | 5/7 [00:40<00:08,  4.14s/it]    Fetching GFS for 2023-12-31 18:00:00:  86%|████████▌ | 6/7 [00:41<00:03,  3.01s/it]                                                                                       2024-06-24 21:13:51.459 | DEBUG    | earth2studio.data.gfs:fetch_gfs_dataarray:196 - Fetching GFS grib file for variable: t2m at 2023-12-31 18:00:00
    Fetching GFS for 2023-12-31 18:00:00:  86%|████████▌ | 6/7 [00:41<00:03,  3.01s/it]    Fetching GFS for 2023-12-31 18:00:00: 100%|██████████| 7/7 [00:42<00:00,  2.27s/it]    Fetching GFS for 2023-12-31 18:00:00: 100%|██████████| 7/7 [00:42<00:00,  6.05s/it]
    2024-06-24 21:13:52.217 | DEBUG    | earth2studio.data.gfs:fetch_gfs_dataarray:149 - Fetching GFS index file: 2024-01-01 00:00:00
    Fetching GFS for 2024-01-01 00:00:00:   0%|          | 0/7 [00:00<?, ?it/s]                                                                               2024-06-24 21:13:52.310 | DEBUG    | earth2studio.data.gfs:fetch_gfs_dataarray:196 - Fetching GFS grib file for variable: t850 at 2024-01-01 00:00:00
    Fetching GFS for 2024-01-01 00:00:00:   0%|          | 0/7 [00:00<?, ?it/s]                                                                               2024-06-24 21:13:52.332 | DEBUG    | earth2studio.data.gfs:fetch_gfs_dataarray:196 - Fetching GFS grib file for variable: z1000 at 2024-01-01 00:00:00
    Fetching GFS for 2024-01-01 00:00:00:   0%|          | 0/7 [00:00<?, ?it/s]                                                                               2024-06-24 21:13:52.351 | DEBUG    | earth2studio.data.gfs:fetch_gfs_dataarray:196 - Fetching GFS grib file for variable: z700 at 2024-01-01 00:00:00
    Fetching GFS for 2024-01-01 00:00:00:   0%|          | 0/7 [00:00<?, ?it/s]    Fetching GFS for 2024-01-01 00:00:00:  43%|████▎     | 3/7 [00:00<00:01,  3.33it/s]                                                                                       2024-06-24 21:13:53.210 | DEBUG    | earth2studio.data.gfs:fetch_gfs_dataarray:196 - Fetching GFS grib file for variable: z500 at 2024-01-01 00:00:00
    Fetching GFS for 2024-01-01 00:00:00:  43%|████▎     | 3/7 [00:00<00:01,  3.33it/s]                                                                                       2024-06-24 21:13:53.229 | DEBUG    | earth2studio.data.gfs:fetch_gfs_dataarray:196 - Fetching GFS grib file for variable: z300 at 2024-01-01 00:00:00
    Fetching GFS for 2024-01-01 00:00:00:  43%|████▎     | 3/7 [00:00<00:01,  3.33it/s]    Fetching GFS for 2024-01-01 00:00:00:  71%|███████▏  | 5/7 [00:01<00:00,  2.81it/s]                                                                                       2024-06-24 21:13:54.038 | DEBUG    | earth2studio.data.gfs:fetch_gfs_dataarray:196 - Fetching GFS grib file for variable: tcwv at 2024-01-01 00:00:00
    Fetching GFS for 2024-01-01 00:00:00:  71%|███████▏  | 5/7 [00:01<00:00,  2.81it/s]                                                                                       2024-06-24 21:13:54.061 | DEBUG    | earth2studio.data.gfs:fetch_gfs_dataarray:196 - Fetching GFS grib file for variable: t2m at 2024-01-01 00:00:00
    Fetching GFS for 2024-01-01 00:00:00:  71%|███████▏  | 5/7 [00:01<00:00,  2.81it/s]    Fetching GFS for 2024-01-01 00:00:00: 100%|██████████| 7/7 [00:01<00:00,  3.95it/s]
    2024-06-24 21:13:54.110 | SUCCESS  | earth2studio.run:ensemble:315 - Fetched data from GFS
    2024-06-24 21:13:54.117 | INFO     | earth2studio.run:ensemble:337 - Starting 8 Member Ensemble Inference with             2 number of batches.
    Total Ensemble Batches:   0%|          | 0/2 [00:00<?, ?it/s]
    Running batch 0 inference:   0%|          | 0/11 [00:00<?, ?it/s]
    Running batch 0 inference:   9%|▉         | 1/11 [00:00<00:02,  3.34it/s]
    Running batch 0 inference:  18%|█▊        | 2/11 [00:00<00:03,  2.62it/s]
    Running batch 0 inference:  27%|██▋       | 3/11 [00:01<00:03,  2.54it/s]
    Running batch 0 inference:  36%|███▋      | 4/11 [00:01<00:02,  2.37it/s]
    Running batch 0 inference:  45%|████▌     | 5/11 [00:02<00:02,  2.25it/s]
    Running batch 0 inference:  55%|█████▍    | 6/11 [00:02<00:02,  2.09it/s]
    Running batch 0 inference:  64%|██████▎   | 7/11 [00:03<00:01,  2.01it/s]
    Running batch 0 inference:  73%|███████▎  | 8/11 [00:03<00:01,  1.92it/s]
    Running batch 0 inference:  82%|████████▏ | 9/11 [00:04<00:01,  1.87it/s]
    Running batch 0 inference:  91%|█████████ | 10/11 [00:04<00:00,  1.81it/s]
    Running batch 0 inference: 100%|██████████| 11/11 [00:05<00:00,  1.76it/s]
                                                                                  Total Ensemble Batches:  50%|█████     | 1/2 [00:08<00:08,  8.33s/it]
    Running batch 4 inference:   0%|          | 0/11 [00:00<?, ?it/s]
    Running batch 4 inference:   9%|▉         | 1/11 [00:00<00:02,  3.39it/s]
    Running batch 4 inference:  18%|█▊        | 2/11 [00:00<00:03,  2.71it/s]
    Running batch 4 inference:  27%|██▋       | 3/11 [00:01<00:03,  2.52it/s]
    Running batch 4 inference:  36%|███▋      | 4/11 [00:01<00:03,  2.31it/s]
    Running batch 4 inference:  45%|████▌     | 5/11 [00:02<00:02,  2.22it/s]
    Running batch 4 inference:  55%|█████▍    | 6/11 [00:02<00:02,  2.11it/s]
    Running batch 4 inference:  64%|██████▎   | 7/11 [00:03<00:01,  2.00it/s]
    Running batch 4 inference:  73%|███████▎  | 8/11 [00:03<00:01,  1.90it/s]
    Running batch 4 inference:  82%|████████▏ | 9/11 [00:04<00:01,  1.83it/s]
    Running batch 4 inference:  91%|█████████ | 10/11 [00:04<00:00,  1.78it/s]
    Running batch 4 inference: 100%|██████████| 11/11 [00:05<00:00,  1.73it/s]
                                                                                  Total Ensemble Batches: 100%|██████████| 2/2 [00:16<00:00,  8.34s/it]    Total Ensemble Batches: 100%|██████████| 2/2 [00:16<00:00,  8.34s/it]
    2024-06-24 21:14:10.792 | SUCCESS  | earth2studio.run:ensemble:382 - Inference complete




.. GENERATED FROM PYTHON SOURCE LINES 146-153

Post Processing
---------------
The last step is to post process our results. Lets plot both the perturbed t2m field
and also the unperturbed tcwv field. First to confirm the perturbation method works as
expect, the initial state is plotted.

Notice that the Zarr IO function has additional APIs to interact with the stored data.

.. GENERATED FROM PYTHON SOURCE LINES 155-199

.. code-block:: Python

    import matplotlib.pyplot as plt

    forecast = "2024-01-01"


    def plot_(axi, data, title, cmap):
        """Simple plot util function"""
        im = axi.imshow(data, cmap=cmap)
        plt.colorbar(im, ax=axi, shrink=0.5, pad=0.04)
        axi.set_title(title)


    step = 0  # lead time = 24 hrs
    plt.close("all")

    # Create a figure and axes with the specified projection
    fig, ax = plt.subplots(nrows=2, ncols=2, figsize=(10, 6))
    plot_(
        ax[0, 0],
        np.mean(io["t2m"][:, 0, step], axis=0),
        f"{forecast} - t2m - Lead time: {6*step}hrs - Mean",
        "coolwarm",
    )
    plot_(
        ax[0, 1],
        np.std(io["t2m"][:, 0, step], axis=0),
        f"{forecast} - t2m - Lead time: {6*step}hrs - Std",
        "coolwarm",
    )
    plot_(
        ax[1, 0],
        np.mean(io["tcwv"][:, 0, step], axis=0),
        f"{forecast} - tcwv - Lead time: {6*step}hrs - Mean",
        "Blues",
    )
    plot_(
        ax[1, 1],
        np.std(io["tcwv"][:, 0, step], axis=0),
        f"{forecast} - tcwv - Lead time: {6*step}hrs - Std",
        "Blues",
    )

    plt.savefig(f"outputs/05_{forecast}_{step}_ensemble.jpg")




.. image-sg:: /examples/images/sphx_glr_05_ensemble_workflow_extend_001.png
   :alt: 2024-01-01 - t2m - Lead time: 0hrs - Mean, 2024-01-01 - t2m - Lead time: 0hrs - Std, 2024-01-01 - tcwv - Lead time: 0hrs - Mean, 2024-01-01 - tcwv - Lead time: 0hrs - Std
   :srcset: /examples/images/sphx_glr_05_ensemble_workflow_extend_001.png, /examples/images/sphx_glr_05_ensemble_workflow_extend_001_2_00x.png 2.00x
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 200-204

Due to the intrinsic coupling between all fields, we should expect all variables to
have some uncertainty for later lead times. Here the total column water vapor is
plotted at a lead time of 24 hours, note the variance in the members despite just
perturbing the temperature field.

.. GENERATED FROM PYTHON SOURCE LINES 206-225

.. code-block:: Python

    step = 4  # lead time = 24 hrs
    plt.close("all")

    # Create a figure and axes with the specified projection
    fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(10, 3))
    plot_(
        ax[0],
        np.mean(io["tcwv"][:, 0, step], axis=0),
        f"{forecast} - tcwv - Lead time: {6*step}hrs - Mean",
        "Blues",
    )
    plot_(
        ax[1],
        np.std(io["tcwv"][:, 0, step], axis=0),
        f"{forecast} - tcwv - Lead time: {6*step}hrs - Std",
        "Blues",
    )

    plt.savefig(f"outputs/05_{forecast}_{step}_ensemble.jpg")



.. image-sg:: /examples/images/sphx_glr_05_ensemble_workflow_extend_002.png
   :alt: 2024-01-01 - tcwv - Lead time: 24hrs - Mean, 2024-01-01 - tcwv - Lead time: 24hrs - Std
   :srcset: /examples/images/sphx_glr_05_ensemble_workflow_extend_002.png, /examples/images/sphx_glr_05_ensemble_workflow_extend_002_2_00x.png 2.00x
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (1 minutes 5.763 seconds)


.. _sphx_glr_download_examples_05_ensemble_workflow_extend.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 05_ensemble_workflow_extend.ipynb <05_ensemble_workflow_extend.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 05_ensemble_workflow_extend.py <05_ensemble_workflow_extend.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
