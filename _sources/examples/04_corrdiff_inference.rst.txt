
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/04_corrdiff_inference.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_04_corrdiff_inference.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_04_corrdiff_inference.py:


Generative Downscaling
========================

Generative downscaling over Taiwan using CorrDiff diffusion model.

This example will demonstrate how to user Nvidia's CorrDiff model, trained for
predicting weather over Taiwan, to perform generative downscaling from quarter degree
global forecast data to ~3km.

This checkpoint was trained on ERA5 data and WRF data that spans 2018-2021 at one hour
time resolution. In this example, we demonstrate an application to GFS data for a typhoon
super-resolution from 2023. The model's performance on GFS data and on data from this year
has not been evaluated.

In this example you will learn:

- Creating a custom workflow for running CorrDiff inference
- Creating a data-source for CorrDiff's input
- Initializing and running CorrDiff diagnostic model
- Post-processing results.

.. GENERATED FROM PYTHON SOURCE LINES 42-58

Creating a Simple CorrDiff Workflow
-----------------------------------

As usual, we start with creating a simple workflow to run CorrDiff in. To maximize the
generalization of this workflow, we use dependency injection following the pattern
provided inside :py:obj:`earth2studio.run`. Since CorrDiff is a diagnostic model, this
workflow won't predict a time-series, rather just an instantaneous prediction.


For this workflow, we specify

- time: Input list of datetimes / strings to run inference for
- corrdiff: The initialized CorrDiffTaiwan model
- data: Initialized data source to fetch initial conditions from
- io: IOBackend
- number_of_samples: Number of samples to generate from the model

.. GENERATED FROM PYTHON SOURCE LINES 60-145

.. code-block:: Python

    import os

    os.makedirs("outputs", exist_ok=True)
    from dotenv import load_dotenv

    load_dotenv()  # TODO: make common example prep function

    from collections import OrderedDict
    from datetime import datetime

    import numpy as np
    import torch
    from loguru import logger

    from earth2studio.data import DataSource, prep_data_array
    from earth2studio.io import IOBackend
    from earth2studio.models.dx import CorrDiffTaiwan
    from earth2studio.utils.coords import map_coords, split_coords
    from earth2studio.utils.time import to_time_array


    def run(
        time: list[str] | list[datetime] | list[np.datetime64],
        corrdiff: CorrDiffTaiwan,
        data: DataSource,
        io: IOBackend,
        number_of_samples: int = 1,
    ) -> IOBackend:
        """CorrDiff infernce workflow

        Parameters
        ----------
        time : list[str] | list[datetime] | list[np.datetime64]
            List of string, datetimes or np.datetime64
        corrdiff : CorrDiffTaiwan
            CorrDiff mode
        data : DataSource
            Data source
        io : IOBackend
            IO object
        number_of_samples : int, optional
            Number of samples to generate, by default 1

        Returns
        -------
        IOBackend
            Output IO object
        """
        logger.info("Running corrdiff inference!")
        device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
        logger.info(f"Inference device: {device}")

        corrdiff = corrdiff.to(device)
        # Update the number of samples for corrdiff to generate
        corrdiff.number_of_samples = number_of_samples

        # Fetch data from data source and load onto device
        time = to_time_array(time)
        x, coords = prep_data_array(
            data(time, corrdiff.input_coords()["variable"]), device=device
        )
        x, coords = map_coords(x, coords, corrdiff.input_coords())

        logger.success(f"Fetched data from {data.__class__.__name__}")

        # Set up IO backend
        output_coords = corrdiff.output_coords(corrdiff.input_coords())
        total_coords = OrderedDict(
            {
                "time": coords["time"],
                "sample": output_coords["sample"],
                "lat": output_coords["lat"],
                "lon": output_coords["lon"],
            }
        )
        io.add_array(total_coords, output_coords["variable"])

        logger.info("Inference starting!")
        x, coords = corrdiff(x, coords)
        io.write(*split_coords(x, coords))

        logger.success("Inference complete")
        return io









.. GENERATED FROM PYTHON SOURCE LINES 146-157

Set Up
------
With the workflow defined, the next step is initializing the needed components from
Earth-2 studio

It's clear we need the following:

- Diagnostic Model: CorrDiff model for Taiwan :py:class:`earth2studio.models.dx.CorrDiffTaiwan`.
- Datasource: Pull data from the GFS data api :py:class:`earth2studio.data.GFS`.
- IO Backend: Save the outputs into a Zarr store :py:class:`earth2studio.io.ZarrBackend`.


.. GENERATED FROM PYTHON SOURCE LINES 159-172

.. code-block:: Python

    from earth2studio.data import GFS
    from earth2studio.io import ZarrBackend

    # Create CorrDiff model
    package = CorrDiffTaiwan.load_default_package()
    corrdiff = CorrDiffTaiwan.load_model(package)

    # Create the data source
    data = GFS()

    # Create the IO handler, store in memory
    io = ZarrBackend()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Downloading corrdiff_inference_package.zip: 0%|          | 0.00/684M [00:00<?, ?B/s]    Downloading corrdiff_inference_package.zip: 1%|          | 6.98M/684M [00:00<00:09, 72.3MB/s]    Downloading corrdiff_inference_package.zip: 2%|▏         | 16.7M/684M [00:00<00:07, 89.2MB/s]    Downloading corrdiff_inference_package.zip: 4%|▍         | 27.6M/684M [00:00<00:07, 97.4MB/s]    Downloading corrdiff_inference_package.zip: 5%|▌         | 37.1M/684M [00:00<00:09, 75.0MB/s]    Downloading corrdiff_inference_package.zip: 8%|▊         | 53.7M/684M [00:00<00:06, 104MB/s]     Downloading corrdiff_inference_package.zip: 9%|▉         | 64.5M/684M [00:00<00:06, 104MB/s]    Downloading corrdiff_inference_package.zip: 11%|█         | 76.1M/684M [00:00<00:05, 107MB/s]    Downloading corrdiff_inference_package.zip: 13%|█▎        | 86.7M/684M [00:01<00:07, 81.8MB/s]    Downloading corrdiff_inference_package.zip: 16%|█▌        | 107M/684M [00:01<00:05, 113MB/s]      Downloading corrdiff_inference_package.zip: 19%|█▉        | 129M/684M [00:01<00:04, 143MB/s]    Downloading corrdiff_inference_package.zip: 22%|██▏       | 148M/684M [00:01<00:03, 157MB/s]    Downloading corrdiff_inference_package.zip: 24%|██▍       | 164M/684M [00:01<00:03, 160MB/s]    Downloading corrdiff_inference_package.zip: 26%|██▋       | 180M/684M [00:01<00:04, 113MB/s]    Downloading corrdiff_inference_package.zip: 28%|██▊       | 194M/684M [00:01<00:04, 118MB/s]    Downloading corrdiff_inference_package.zip: 31%|███       | 211M/684M [00:01<00:03, 133MB/s]    Downloading corrdiff_inference_package.zip: 33%|███▎      | 226M/684M [00:01<00:03, 136MB/s]    Downloading corrdiff_inference_package.zip: 35%|███▌      | 240M/684M [00:02<00:03, 133MB/s]    Downloading corrdiff_inference_package.zip: 38%|███▊      | 257M/684M [00:02<00:03, 145MB/s]    Downloading corrdiff_inference_package.zip: 40%|████      | 274M/684M [00:02<00:02, 153MB/s]    Downloading corrdiff_inference_package.zip: 42%|████▏     | 289M/684M [00:02<00:02, 155MB/s]    Downloading corrdiff_inference_package.zip: 45%|████▍     | 305M/684M [00:02<00:02, 151MB/s]    Downloading corrdiff_inference_package.zip: 47%|████▋     | 320M/684M [00:02<00:02, 147MB/s]    Downloading corrdiff_inference_package.zip: 49%|████▉     | 338M/684M [00:02<00:02, 160MB/s]    Downloading corrdiff_inference_package.zip: 52%|█████▏    | 354M/684M [00:02<00:02, 154MB/s]    Downloading corrdiff_inference_package.zip: 55%|█████▍    | 375M/684M [00:02<00:01, 172MB/s]    Downloading corrdiff_inference_package.zip: 57%|█████▋    | 392M/684M [00:03<00:01, 167MB/s]    Downloading corrdiff_inference_package.zip: 60%|█████▉    | 408M/684M [00:03<00:01, 165MB/s]    Downloading corrdiff_inference_package.zip: 62%|██████▏   | 427M/684M [00:03<00:01, 175MB/s]    Downloading corrdiff_inference_package.zip: 65%|██████▍   | 443M/684M [00:03<00:01, 155MB/s]    Downloading corrdiff_inference_package.zip: 67%|██████▋   | 459M/684M [00:03<00:01, 147MB/s]    Downloading corrdiff_inference_package.zip: 70%|██████▉   | 477M/684M [00:03<00:01, 158MB/s]    Downloading corrdiff_inference_package.zip: 72%|███████▏  | 493M/684M [00:03<00:01, 137MB/s]    Downloading corrdiff_inference_package.zip: 74%|███████▍  | 507M/684M [00:03<00:01, 128MB/s]    Downloading corrdiff_inference_package.zip: 77%|███████▋  | 526M/684M [00:04<00:01, 148MB/s]    Downloading corrdiff_inference_package.zip: 79%|███████▉  | 543M/684M [00:04<00:00, 154MB/s]    Downloading corrdiff_inference_package.zip: 82%|████████▏ | 558M/684M [00:04<00:00, 154MB/s]    Downloading corrdiff_inference_package.zip: 84%|████████▍ | 575M/684M [00:04<00:00, 161MB/s]    Downloading corrdiff_inference_package.zip: 87%|████████▋ | 592M/684M [00:04<00:00, 167MB/s]    Downloading corrdiff_inference_package.zip: 89%|████████▉ | 611M/684M [00:04<00:00, 176MB/s]    Downloading corrdiff_inference_package.zip: 93%|█████████▎| 633M/684M [00:04<00:00, 191MB/s]    Downloading corrdiff_inference_package.zip: 95%|█████████▌| 651M/684M [00:04<00:00, 163MB/s]    Downloading corrdiff_inference_package.zip: 98%|█████████▊| 668M/684M [00:04<00:00, 164MB/s]    Downloading corrdiff_inference_package.zip: 100%|██████████| 684M/684M [00:04<00:00, 144MB/s]




.. GENERATED FROM PYTHON SOURCE LINES 173-182

Execute the Workflow
--------------------
With all components initialized, running the workflow is a single line of Python code.
Workflow will return the provided IO object back to the user, which can be used to
then post process. Some have additional APIs that can be handy for post-processing or
saving to file. Check the API docs for more information.

For the inference we will predict 1 sample for a particular timestamp representing
Typhoon Koinu.

.. GENERATED FROM PYTHON SOURCE LINES 184-186

.. code-block:: Python

    io = run(["2023-10-04T18:00:00"], corrdiff, data, io, number_of_samples=1)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    2025-06-09 03:11:13.167 | INFO     | __main__:run:108 - Running corrdiff inference!
    2025-06-09 03:11:13.167 | INFO     | __main__:run:110 - Inference device: cuda
    Fetching GFS data:   0%|          | 0/12 [00:00<?, ?it/s]                                                             2025-06-09 03:11:13.612 | DEBUG    | earth2studio.data.gfs:fetch_array:355 - Fetching GFS grib file: noaa-gfs-bdp-pds/gfs.20231004/18/atmos/gfs.t18z.pgrb2.0p25.f000 331406077-849817
    Fetching GFS data:   0%|          | 0/12 [00:00<?, ?it/s]                                                             2025-06-09 03:11:13.613 | DEBUG    | earth2studio.data.gfs:fetch_array:355 - Fetching GFS grib file: noaa-gfs-bdp-pds/gfs.20231004/18/atmos/gfs.t18z.pgrb2.0p25.f000 330494443-911634
    Fetching GFS data:   0%|          | 0/12 [00:00<?, ?it/s]                                                             2025-06-09 03:11:13.613 | DEBUG    | earth2studio.data.gfs:fetch_array:355 - Fetching GFS grib file: noaa-gfs-bdp-pds/gfs.20231004/18/atmos/gfs.t18z.pgrb2.0p25.f000 337303053-570645
    Fetching GFS data:   0%|          | 0/12 [00:00<?, ?it/s]                                                             2025-06-09 03:11:13.614 | DEBUG    | earth2studio.data.gfs:fetch_array:355 - Fetching GFS grib file: noaa-gfs-bdp-pds/gfs.20231004/18/atmos/gfs.t18z.pgrb2.0p25.f000 412051984-953804
    Fetching GFS data:   0%|          | 0/12 [00:00<?, ?it/s]                                                             2025-06-09 03:11:13.615 | DEBUG    | earth2studio.data.gfs:fetch_array:355 - Fetching GFS grib file: noaa-gfs-bdp-pds/gfs.20231004/18/atmos/gfs.t18z.pgrb2.0p25.f000 337873698-579539
    Fetching GFS data:   0%|          | 0/12 [00:00<?, ?it/s]                                                             2025-06-09 03:11:13.615 | DEBUG    | earth2studio.data.gfs:fetch_array:355 - Fetching GFS grib file: noaa-gfs-bdp-pds/gfs.20231004/18/atmos/gfs.t18z.pgrb2.0p25.f000 258879946-735487
    Fetching GFS data:   0%|          | 0/12 [00:00<?, ?it/s]                                                             2025-06-09 03:11:13.616 | DEBUG    | earth2studio.data.gfs:fetch_array:355 - Fetching GFS grib file: noaa-gfs-bdp-pds/gfs.20231004/18/atmos/gfs.t18z.pgrb2.0p25.f000 411076281-975703
    Fetching GFS data:   0%|          | 0/12 [00:00<?, ?it/s]                                                             2025-06-09 03:11:13.616 | DEBUG    | earth2studio.data.gfs:fetch_array:355 - Fetching GFS grib file: noaa-gfs-bdp-pds/gfs.20231004/18/atmos/gfs.t18z.pgrb2.0p25.f000 258060355-819591
    Fetching GFS data:   0%|          | 0/12 [00:00<?, ?it/s]                                                             2025-06-09 03:11:13.617 | DEBUG    | earth2studio.data.gfs:fetch_array:355 - Fetching GFS grib file: noaa-gfs-bdp-pds/gfs.20231004/18/atmos/gfs.t18z.pgrb2.0p25.f000 418951103-1205697
    Fetching GFS data:   0%|          | 0/12 [00:00<?, ?it/s]                                                             2025-06-09 03:11:13.618 | DEBUG    | earth2studio.data.gfs:fetch_array:355 - Fetching GFS grib file: noaa-gfs-bdp-pds/gfs.20231004/18/atmos/gfs.t18z.pgrb2.0p25.f000 264790161-556189
    Fetching GFS data:   0%|          | 0/12 [00:00<?, ?it/s]                                                             2025-06-09 03:11:13.618 | DEBUG    | earth2studio.data.gfs:fetch_array:355 - Fetching GFS grib file: noaa-gfs-bdp-pds/gfs.20231004/18/atmos/gfs.t18z.pgrb2.0p25.f000 264233423-556738
    Fetching GFS data:   0%|          | 0/12 [00:00<?, ?it/s]                                                             2025-06-09 03:11:13.619 | DEBUG    | earth2studio.data.gfs:fetch_array:355 - Fetching GFS grib file: noaa-gfs-bdp-pds/gfs.20231004/18/atmos/gfs.t18z.pgrb2.0p25.f000 407465443-514270
    Fetching GFS data:   0%|          | 0/12 [00:00<?, ?it/s]    Fetching GFS data:   8%|▊         | 1/12 [00:00<00:05,  2.15it/s]    Fetching GFS data:  25%|██▌       | 3/12 [00:00<00:01,  5.63it/s]    Fetching GFS data:  92%|█████████▏| 11/12 [00:00<00:00, 13.81it/s]    Fetching GFS data: 100%|██████████| 12/12 [00:01<00:00, 11.51it/s]
    2025-06-09 03:11:14.664 | SUCCESS  | __main__:run:123 - Fetched data from GFS
    2025-06-09 03:11:14.664 | WARNING  | earth2studio.io.zarr:add_array:192 - Datetime64 not supported in zarr 3.0, converting to int64 nanoseconds since epoch
    2025-06-09 03:11:14.689 | INFO     | __main__:run:137 - Inference starting!
    2025-06-09 03:11:16.327 | SUCCESS  | __main__:run:141 - Inference complete




.. GENERATED FROM PYTHON SOURCE LINES 187-193

Post Processing
---------------
The last step is to post process our results. Cartopy is a great library for plotting
fields on projections of a sphere.

Notice that the Zarr IO function has additional APIs to interact with the stored data.

.. GENERATED FROM PYTHON SOURCE LINES 195-244

.. code-block:: Python

    import cartopy.crs as ccrs
    import matplotlib.pyplot as plt

    projection = ccrs.LambertConformal(
        central_longitude=io["lon"][:].mean(),
    )

    fig = plt.figure(figsize=(4 * 8, 8))

    ax0 = fig.add_subplot(1, 3, 1, projection=projection)
    c = ax0.pcolormesh(
        io["lon"],
        io["lat"],
        io["mrr"][0, 0],
        transform=ccrs.PlateCarree(),
        cmap="inferno",
    )
    plt.colorbar(c, ax=ax0, shrink=0.6, label="mrr dBz")
    ax0.coastlines()
    ax0.gridlines()
    ax0.set_title("Radar Reflectivity")

    ax1 = fig.add_subplot(1, 3, 2, projection=projection)
    c = ax1.pcolormesh(
        io["lon"],
        io["lat"],
        io["t2m"][0, 0],
        transform=ccrs.PlateCarree(),
        cmap="RdBu_r",
    )
    plt.colorbar(c, ax=ax1, shrink=0.6, label="K")
    ax1.coastlines()
    ax1.gridlines()
    ax1.set_title("2-meter Temperature")

    ax2 = fig.add_subplot(1, 3, 3, projection=projection)
    c = ax2.pcolormesh(
        io["lon"],
        io["lat"],
        np.sqrt(io["u10m"][0, 0] ** 2 + io["v10m"][0, 0] ** 2),
        transform=ccrs.PlateCarree(),
        cmap="Greens",
    )
    plt.colorbar(c, ax=ax2, shrink=0.6, label="w10m m s^-1")
    ax2.coastlines()
    ax2.gridlines()
    ax2.set_title("10-meter Wind Speed")

    plt.savefig("outputs/04_corr_diff_prediction.jpg")



.. image-sg:: /examples/images/sphx_glr_04_corrdiff_inference_001.png
   :alt: Radar Reflectivity, 2-meter Temperature, 10-meter Wind Speed
   :srcset: /examples/images/sphx_glr_04_corrdiff_inference_001.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 17.545 seconds)


.. _sphx_glr_download_examples_04_corrdiff_inference.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 04_corrdiff_inference.ipynb <04_corrdiff_inference.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 04_corrdiff_inference.py <04_corrdiff_inference.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: 04_corrdiff_inference.zip <04_corrdiff_inference.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
